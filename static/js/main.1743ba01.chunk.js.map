{"version":3,"sources":["game/Word.js","game/Board.js","game/Tray.js","game/Picture.js","game/NextButton.js","game/Game.js","game/Puzzles.js","App.js","serviceWorker.js","index.js"],"names":["WordContainer","styled","isSelected","coords","direction","otherProps","x","y","length","Square","isLocked","Word","props","word","onSelectWord","tempLettersState","onRemoveTempLetter","text","id","squares","map","letter","index","displayLetter","isVisible","tempLetter","key","onClick","GridContainer","gridSize","Board","puzzle","puzzleState","selectedWordIndex","words","fixedWords","forEach","wordIndex","fixedText","letterIndex","isLetterDone","push","wordBlocks","Container","div","LetterBlock","isUsed","Message","Tray","letterStates","onPickTempLetter","letterBlocks","letterState","handlePickLetter","PictureContainer","img","PictureBacking","PictureOverlay","Picture","url","useState","isBig","setIsBig","handleClick","old","useEffect","window","addEventListener","e","src","alt","StyledNextButton","button","NextButton","onNextLevel","Base","makePuzzleState","isDone","Array","fill","Game","setSelectedWordIndex","setTempLettersState","setLetterStates","isFinished","setIsFinished","setPuzzleState","correctAnswer","every","i","console","log","p","wordState","overlap","newWordState","selectedWord","newLetterStates","letters","char","charIndex","usedIndex","findIndex","selectedLetterIndex","letterToRestore","trayIndex","otherLetterState","picture","selectedLetter","toUpdateIndex","Puzzles","randomLetters","split","randomLetter","Math","floor","random","this","result","lettersToAdd","max","getRandomLettersFor","shuffle","otherWord","x2","y2","j","indexOf","App","currentLevel","setCurrentLevel","document","body","style","background","oldLevel","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1743ba01.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nconst WordContainer = styled(({ isSelected, coords, direction, ...otherProps }) => <div {...otherProps} />)`\r\n\tdisplay: flex;\r\n\tflex-direction: ${({ direction }) => direction};\r\n  justify-content: center;\r\n  z-index: ${({ isSelected}) => isSelected ? '1' : 'auto'}\r\n\tgrid-column-start: ${({ coords }) => coords.x};\r\n\tgrid-row-start: ${({ coords }) => coords.y};\r\n\t${({ direction }) => direction === 'row' ? 'grid-column-end' : 'grid-row-end'}: span ${({ length }) => length};\r\n`\r\n\r\nconst Square = styled(({ isSelected, isLocked, ...otherProps }) => <div {...otherProps} />)`\r\n  flex: 1 1 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: ${({ isLocked, isSelected }) => \r\n    isLocked ? 'rgb(200, 141, 187)' : \r\n      isSelected ? 'rgb(220, 220, 240)' : 'rgb(240, 240, 240)'};\r\n\tmargin: 1px;\r\n  border-radius: 5px;\r\n  user-select: none;\r\n  font-size: 35px;\r\n  text-transform: uppercase;\r\n  font-family: sans-serif;\r\n`\r\n\r\nconst Word = props => {\r\n\tconst { word, onSelectWord, isSelected, tempLettersState, onRemoveTempLetter } = props\r\n\tconst {\r\n\t\ttext,\r\n\t\tcoords,\r\n\t\tdirection,\r\n\t\tid,\r\n\t} = word\r\n\r\n\tconst squares = text.map((letter, index) => {\r\n\t\tlet displayLetter = letter.isVisible ? letter.letter : ''\r\n\t\tif (isSelected) {\r\n\t\t\tdisplayLetter= tempLettersState[index].tempLetter\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Square isSelected={isSelected} isLocked={letter.isVisible} key={index} onClick={() => isSelected && onRemoveTempLetter(index)}>{displayLetter}</Square>\r\n\t\t)\r\n\t})\r\n\r\n\treturn (\r\n\t\t<WordContainer\r\n\t\t\tonClick={() => {\r\n        onSelectWord(id)}}\r\n\t\t\tisSelected={isSelected}\r\n\t\t\tcoords={coords}\r\n\t\t\tdirection={direction}\r\n\t\t\tlength={text.length}\r\n\t\t>\r\n\t\t\t{squares}\r\n\t\t</WordContainer>\r\n\t)\r\n}\r\n\r\nWord.propTypes = {\r\n\tword: PropTypes.object,\r\n\tonSelectWord: PropTypes.func,\r\n\tisSelected: PropTypes.bool,\r\n  tempLettersState: PropTypes.array,\r\n  onRemoveTempLetter: PropTypes.func,\r\n}\r\n\r\nexport default Word","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nimport Word from './Word'\r\n\r\nconst GridContainer = styled(({ gridSize, ...otherProps }) => <div {...otherProps} />)`\r\n  width: 500px;\r\n  height: 500px;\r\n  margin-bottom: 10px;\r\n  display: grid;\r\n  grid-template-columns: repeat(${({ gridSize }) => gridSize}, 1fr);\r\n  grid-template-rows: repeat(${({ gridSize }) => gridSize}, 1fr);\r\n`\r\n\r\nconst Board = props => {\r\n\tconst { puzzle, puzzleState, onSelectWord, selectedWordIndex, tempLettersState, onRemoveTempLetter } = props\r\n\tconst { gridSize, words } = puzzle\r\n\r\n  // all this should go...\r\n  const fixedWords = []\r\n  words.forEach((word, wordIndex) => {\r\n    const fixedText = word.text.map(letter => { return {...letter}})\r\n    \r\n    fixedText.forEach((letter, letterIndex) => {\r\n      letter.isVisible |= puzzleState[wordIndex]?.isLetterDone[letterIndex]\r\n    })\r\n    fixedWords.push({...word, text: fixedText})\r\n  })\r\n\r\n  const wordBlocks = fixedWords.map((word, index) =>\r\n\t\t<Word\r\n\t\t\tword={word}\r\n\t\t\tonSelectWord={() => onSelectWord(index)}\r\n\t\t\tisSelected={index === selectedWordIndex}\r\n      tempLettersState={tempLettersState}\r\n      onRemoveTempLetter={onRemoveTempLetter}\r\n\t\t\tkey={index}\r\n\t\t/>\r\n\t)\r\n\r\n\treturn (\r\n\t\t<GridContainer gridSize={gridSize} >\r\n\t\t\t{wordBlocks}\r\n\t\t</GridContainer>\r\n\t)\r\n}\r\n\r\nBoard.propTypes = {\r\n\tpuzzle: PropTypes.object,\r\n\tpuzzleState: PropTypes.array,\r\n\tonSelectWord: PropTypes.func,\r\n\tselectedWordIndex: PropTypes.number,\r\n  tempLettersState: PropTypes.array,\r\n  onRemoveTempLetter: PropTypes.func,\r\n}\r\n\r\nexport default Board","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n\tdisplay: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n\tjustify-content: center;\r\n  font-size: 35px;\r\n  font-family: sans-serif;\r\n`\r\n\r\nconst LetterBlock = styled(({ isUsed, ...otherProps }) => <div {...otherProps} />)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 5px;\r\n  background-color: ${({ isUsed }) => isUsed ? 'rgb(128, 128, 128)' : 'rgb(240, 240, 240)'}} ;\r\n  margin: 5px;\r\n  width: 50px;\r\n  height: 50px;\r\n  user-select: none;\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst Message = styled.div`\r\n  height: 50px;\r\n  margin: 5px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst Tray = props => {\r\n  const { letterStates, onPickTempLetter } = props\r\n\r\n  const handlePickLetter = letterState => {\r\n    if (!letterState.isUsed) {\r\n      onPickTempLetter(letterState)\r\n    }\r\n  }\r\n\r\n  const letterBlocks = letterStates.map((letterState, index) => <LetterBlock\r\n    isUsed={letterState.isUsed}\r\n    onClick={() => handlePickLetter(letterState)}\r\n    key={index}>{letterState.letter}</LetterBlock>)\r\n  return (\r\n    <Container>\r\n      {letterBlocks.length ? letterBlocks : <Message>Select a word</Message>}\r\n    </Container>\r\n  )\r\n}\r\n\r\nTray.propTypes = {\r\n  letterStates: PropTypes.array,\r\n  onPickTempLetter: PropTypes.func\r\n}\r\n\r\nexport default Tray","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nconst PictureContainer = styled.img`\r\n  height: 200px;\r\n  margin: 10px auto;\r\n  display: block;\r\n  -webkit-box-shadow: 4px 4px 15px 0px rgba(92,90,92,1);\r\n  -moz-box-shadow: 4px 4px 15px 0px rgba(92,90,92,1);\r\n  box-shadow: 4px 4px 15px 0px rgba(92,90,92,1);\r\n`\r\n\r\nconst PictureBacking = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 2;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n`\r\n\r\nconst PictureOverlay = styled.img`\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  margin: auto;\r\n  overflow: auto;\r\n  z-index: 3;\r\n`\r\n\r\nconst Picture = props => {\r\n  const { url } = props\r\n  const [isBig, setIsBig] = useState(false)\r\n\r\n  const handleClick = () => setIsBig(old => !old)\r\n\r\n  useEffect(() => {\r\n    const callback = (e) => {\r\n      if (e.key === 'Escape') {\r\n        setIsBig(false)\r\n      }\r\n    }\r\n    window.addEventListener('keydown', callback)\r\n  }, [])\r\n\r\n\treturn (\r\n    <>\r\n      <PictureContainer src={url} alt='' onClick={handleClick} />\r\n      {isBig && <PictureBacking onClick={handleClick} />}\r\n      {isBig && <PictureOverlay src={url} onClick={handleClick} />}\r\n    </>\r\n\t)\r\n}\r\n\r\nPicture.propTypes = {\r\n\turl: PropTypes.string,\r\n}\r\n\r\nexport default Picture\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledNextButton = styled.button`\r\n  font-size: 35px;\r\n  margin: 0 auto;\r\n  display: block;\r\n`\r\n\r\nconst NextButton = props => {\r\n  const { onNextLevel } = props\r\n\r\n\treturn (\r\n\t\t<StyledNextButton onClick={onNextLevel}>Next puzzle!</StyledNextButton>\r\n\t)\r\n}\r\n\r\nexport default NextButton","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Board from './Board'\r\nimport Tray from './Tray'\r\nimport Picture from './Picture'\r\nimport NextButton from './NextButton'\r\n\r\n\r\nconst Base = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0 auto;\r\n  padding: 30px;\r\n  max-width: 800px;\r\n  background: #5D4157;  /* fallback for old browsers */\r\n  background: -webkit-linear-gradient(to top, #A8CABA, #5D4157);  /* Chrome 10-25, Safari 5.1-6 */\r\n  background: linear-gradient(to top, #A8CABA, #5D4157); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\r\n  touch-action: manipulation;\r\n\r\n`\r\n\r\nconst makePuzzleState = (puzzle) => {\r\n  return puzzle.words.map(word => { return {\r\n  isDone: false,\r\n  isLetterDone: Array(word.text.length).fill(false) \r\n}})\r\n}\r\n\r\nconst Game = props => {\r\n  const { puzzle, onNextLevel } = props\r\n\r\n  const [selectedWordIndex, setSelectedWordIndex] = useState(null)\r\n  const [tempLettersState, setTempLettersState] = useState([])\r\n  const [letterStates, setLetterStates] = useState([])\r\n\r\n  const [isFinished, setIsFinished] = useState(false)\r\n  const [puzzleState, setPuzzleState] = useState(makePuzzleState(puzzle))\r\n\r\n  useEffect(() => {\r\n    setSelectedWordIndex(null)\r\n    setTempLettersState([])\r\n    setIsFinished(false)\r\n    setPuzzleState(makePuzzleState(puzzle))\r\n  }, [puzzle])\r\n\r\n  // Check if a word was solved\r\n  useEffect(() => {\r\n    if (selectedWordIndex === null) return\r\n\r\n    const correctAnswer = puzzle.words[selectedWordIndex].text\r\n    if (tempLettersState.every((tempLetter, i) => tempLetter.tempLetter === correctAnswer[i].letter)) {\r\n      console.log('correct!')\r\n      // lock in this word\r\n      setPuzzleState(p => p.map((wordState, i) => i === selectedWordIndex ? { isDone: true, isLetterDone: new Array(wordState.isLetterDone.length).fill(true)} : wordState))\r\n      // lock in letters shared with other words\r\n      for (const letter of correctAnswer) {\r\n        if (letter.overlap) {\r\n          // how to do cleanly\r\n          setPuzzleState(puzzleState => {\r\n            const { wordIndex, letterIndex } = letter.overlap\r\n            const newWordState = {...puzzleState[wordIndex]}\r\n            newWordState.isLetterDone = [...newWordState.isLetterDone]\r\n            newWordState.isLetterDone[letterIndex] = true\r\n            return puzzleState.map((wordState, index) => index === wordIndex ? newWordState : wordState)\r\n          })\r\n        }\r\n      }\r\n\r\n      // end the attempt\r\n      setSelectedWordIndex(null)\r\n      setLetterStates([])\r\n      // a separate useEffect will check if every word is now solved\r\n    }\r\n  }, [tempLettersState, selectedWordIndex, puzzle])\r\n\r\n  // is game finished?\r\n  useEffect(() => {\r\n    if (puzzleState.every(word => word.isDone)) {\r\n      setIsFinished(true)\r\n    }\r\n  }, [puzzleState])\r\n\r\n  const handleSelectWord = index => {\r\n    if (selectedWordIndex === index) return\r\n    if (puzzleState[index].isDone) return\r\n\r\n    setSelectedWordIndex(index)\r\n\r\n    const selectedWord = puzzle.words[index]\r\n    const newLetterStates = selectedWord.letters.map((letter, index) => ({ letter, isUsed: false, id: index }))\r\n\r\n    setTempLettersState(selectedWord.text.map((char, charIndex) => {\r\n\r\n      const isVisible = char.isVisible || puzzleState[index].isLetterDone[charIndex]\r\n      if (isVisible) {\r\n        const usedIndex = newLetterStates.findIndex(letter => letter.letter === char.letter && !letter.isUsed)\r\n        newLetterStates[usedIndex].isUsed = true\r\n      }\r\n      \r\n      return {\r\n        isLocked: isVisible,\r\n        tempLetter: isVisible ? char.letter : null\r\n      }\r\n    })\r\n    )\r\n\r\n    setLetterStates(newLetterStates)\r\n  }\r\n\r\n  const handlePickTempLetter = selectedLetter => {\r\n    const toUpdateIndex = tempLettersState.findIndex(letter => !letter.isLocked && !letter.tempLetter)\r\n\r\n    if (toUpdateIndex === -1) return\r\n\r\n    setTempLettersState(tempLettersState.map((letter, index) => (\r\n      index === toUpdateIndex ? { ...letter, tempLetter: selectedLetter.letter } : { ...letter }\r\n    ))\r\n    )\r\n\r\n    setLetterStates(letterStates.map(otherLetterState => selectedLetter.id === otherLetterState.id ? { ...otherLetterState, isUsed: true } : otherLetterState))\r\n  }\r\n\r\n  const handleRemoveTempLetter = selectedLetterIndex => {\r\n      if (tempLettersState[selectedLetterIndex].isLocked) return\r\n\r\n      setTempLettersState(tempLettersState.map((letter, index) => (\r\n        index === selectedLetterIndex ? { ...letter, tempLetter: null } : { ...letter }\r\n      ))\r\n      )\r\n\r\n      const letterToRestore = tempLettersState[selectedLetterIndex].tempLetter\r\n      const trayIndex = letterStates.findIndex(letter => letter.isUsed && letter.letter === letterToRestore)\r\n\r\n    setLetterStates(letterStates.map((otherLetterState, index) => index === trayIndex ? { ...otherLetterState, isUsed: false } : otherLetterState))\r\n  }\r\n\r\n  return (\r\n    <Base>\r\n      <Board\r\n        puzzle={puzzle}\r\n        puzzleState={puzzleState}\r\n        onSelectWord={handleSelectWord}\r\n        selectedWordIndex={selectedWordIndex}\r\n        tempLettersState={tempLettersState}\r\n        onRemoveTempLetter={handleRemoveTempLetter}\r\n      />\r\n      <Picture url={puzzle.picture}/>\r\n      {isFinished && <NextButton onNextLevel={onNextLevel}/>}\r\n      {!isFinished && <Tray\r\n        letterStates={letterStates}\r\n        onPickTempLetter={handlePickTempLetter}\r\n      />}\r\n    </Base>\r\n  )\r\n}\r\n\r\nGame.propTypes = {\r\n\tpuzzle: PropTypes.object,\r\n\tonNextLevel: PropTypes.func\r\n}\r\n\r\nexport default Game","import shuffle from 'shuffle-array'\r\n\r\nconst Puzzles = []\r\n\r\n\r\nconst randomLetters = \r\n  ('abcdefghijklmnopqrstuvwxyz'\r\n  + 'abcdefghijklmnoprstuvwy'\r\n  + 'aeiou').split('')\r\n\r\nfunction randomLetter() {\r\n  const i = Math.floor(Math.random() * randomLetters.length)\r\n  return randomLetters[i]\r\n}\r\n\r\n// We add some random letters - more if the word is short.\r\nfunction getRandomLettersFor(word) {\r\n  const minTotalTiles = 6\r\n  const minDecoyTiles = 2\r\n  const result = []\r\n  const lettersToAdd = Math.max(minDecoyTiles, minTotalTiles - word.length)\r\n  for (let i = 0; i < lettersToAdd; i++) {\r\n    result.push(randomLetter())\r\n  }\r\n  return result\r\n}\r\n\r\nconst Word = function (text, x, y, direction) {\r\n  this.text = [...text].map(char => ({ letter: char, isVisible: false }))\r\n  this.coords = { x, y }\r\n  this.letters = [...text, ...getRandomLettersFor(text)]\r\n  shuffle(this.letters)\r\n  this.direction = direction\r\n}\r\n\r\nPuzzles.push({\r\n  picture: '1.jpg',\r\n  gridSize: 8,\r\n  words: [\r\n    new Word('laptop', 2, 3, 'column'),\r\n    new Word('glasses', 1, 3, 'row'),\r\n    new Word('desk', 4, 1, 'column'),\r\n    new Word('notebook', 1, 7, 'row'),\r\n  ]\r\n})\r\n\r\nPuzzles.push({\r\n  picture: '2.jpg',\r\n  gridSize: 11,\r\n  words: [\r\n    new Word('sunset', 5, 1, 'column'),\r\n    new Word('hills', 1, 1, 'row'),\r\n    new Word('water', 3, 6, 'row'),\r\n    new Word('friends', 7, 5, 'column'),\r\n    new Word('silhouette', 1, 8, 'row'),\r\n    new Word('sail', 7, 11, 'row'),\r\n  ]\r\n})\r\n\r\nPuzzles.push({\r\n  picture: '3.jpg',\r\n  gridSize: 12,\r\n  words: [\r\n    new Word('horses', 1, 4, 'row'),\r\n    new Word('freedom', 3, 3, 'column'),\r\n    new Word('peaceful', 2, 6, 'row'),\r\n    new Word('fence', 7, 6, 'column'),\r\n    new Word('clouds', 7, 9, 'row'),\r\n    new Word('grass', 12, 5, 'column'),\r\n  ]\r\n})\r\n\r\nPuzzles.push({\r\n  picture: '4.jpg',\r\n  gridSize: 10,\r\n  words: [\r\n    new Word('bicycle', 2, 4, 'row'),\r\n    new Word('walk', 10, 4, 'column'),\r\n    new Word('pet', 1, 2, 'row'),\r\n    new Word('tail', 3, 2, 'column'),\r\n    new Word('leash', 7, 4, 'column'),\r\n    new Word('sock', 7, 7, 'row'),\r\n  ]\r\n})\r\n\r\nPuzzles.push({\r\n  picture: '5.jpg',\r\n  gridSize: 10,\r\n  words: [\r\n    new Word('kitchen', 5, 1, 'column'),\r\n    new Word('kettle', 5, 1, 'row'),\r\n    new Word('celery', 5, 4, 'row'),\r\n    new Word('spices', 1, 6, 'row'),\r\n    new Word('apron', 2, 5, 'column'),\r\n  ]\r\n})\r\n\r\nPuzzles.push({\r\n  picture: '6.jpg',\r\n  gridSize: 10,\r\n  words: [\r\n    new Word('writing', 4, 4, 'row'),\r\n    new Word('door', 1, 6, 'column'),\r\n    new Word('orange', 1, 8, 'row'),\r\n    new Word('woman', 4, 4, 'column'),\r\n    new Word('brick', 6, 2, 'column'),\r\n    new Word('pen', 9, 2, 'column'),\r\n  ]\r\n})\r\n\r\nfor (const puzzle of Puzzles) {\r\n  // One letter starts relealed\r\n  puzzle.words[0].text[0].isVisible = true\r\n\r\n  // Find overlapping letters\r\n  for (const word of puzzle.words) {\r\n    let x = word.coords.x\r\n    let y = word.coords.y\r\n    for (let i = 0; i < word.text.length; i++) {\r\n      for (const otherWord of puzzle.words) {\r\n        if (otherWord !== word) {\r\n          let x2 = otherWord.coords.x\r\n          let y2 = otherWord.coords.y\r\n          for (let j = 0; j < otherWord.text.length; j++) {\r\n            if (x2 === x && y2 === y) {\r\n              // an overlap\r\n              word.text[i].overlap = { wordIndex: puzzle.words.indexOf(otherWord), letterIndex: j} \r\n            }\r\n            if (otherWord.direction === 'row') {\r\n              x2++\r\n            } else {\r\n              y2++\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (word.direction === 'row') {\r\n        x++\r\n      } else {\r\n        y++\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Puzzles","import React, { useState, useEffect } from 'react'\r\nimport Game from './game/Game'\r\nimport Puzzles from './game/Puzzles'\r\n\r\nconst App = () => {\r\n  const [currentLevel, setCurrentLevel] = useState(0)\r\n  const handleNextLevel = () => {\r\n    setCurrentLevel(oldLevel => oldLevel + 1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.body.style.background = '#191e1c'\r\n\r\n    return () => {\r\n      document.body.style.background = null\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <Game \r\n      puzzle={Puzzles[currentLevel % Puzzles.length]}\r\n      onNextLevel={handleNextLevel}\r\n    />\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}